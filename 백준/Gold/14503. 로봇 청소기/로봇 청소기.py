# 로봇 청소기가 존재하고 있는 공간의 세로 가로 길이 N, M 각각 입력받아줌
N, M = map(int, input().split())

# 북쪽으로부터 떨어진 칸의 개수 r, 서쪽으로부터 떨어진 칸의 개수 c, 현재 청소기가 바라보고 있는 방향 r 각각 입력 받아 줌
r, c, d = map(int, input().split())

# N줄만큼 방의 상태를 M개의 인덱스가 존재하는 리스트를 입력받아 2차원 배열 room을 만들어줌
room = [list(map(int, input().split())) for _ in range(N)]

# 청소한 영역의 개수 cnt(가장 먼저 설정되는 칸은 그 즉시 청소된 것이라고 치고, 초기값을 1로 둠) 설정
# 2-3, 4 조건(4 방향 모두 청소가 되어 있거나 벽인 경우)을 검증하기 위해 값이 4(4 방향 검증)인 변수 stack을 생성
cnt = 1
stack = 4

# 본 문제에서 방향의 경우 북: 0, 동: 1, 남: 2, 서: 3로 분류됨
# 방향 변경 시 필요한 리스트 way를 생성함
# 로봇 청소기의 경우 후진하는 특수 케이스를 제외하면 무조건 왼쪽 방향으로 회전하게 됨
# 예를 들어 본래 북쪽 방향을 바라보고 있었다면 서쪽으로 회전하여 검증하는 식임
# 따라서 way에 담긴 값은, 해당 인덱스의 값을 기준으로 왼쪽으로 회전했을 시를 가정한 방향을 담은 인덱스임!
# 만약 d의 값이 0으로 설정되어 있다면, way[0]의 값은 서쪽을 뜻하는 3이 담겨 있음
way = [3, 0, 1, 2]

# 각 방향에 따라, 이동할 수 있도록 각 리스트 설정(굳이 if문 여럿 써서 번거롭게 하고 싶지 않았음...)
di = [-1, 0, 1, 0]
dj = [0, 1, 0, -1]

# 방문 기록할 visited 리스트를 생성해준 후, 처음 값 r, c를 인덱스로 가진 visited 리스트의 값을 1로 변경해줌
# 굳이 이러지 않아도 1로 바꿔줘도 되긴 할 듯? 만약에 통과하면 시도해봄
# 해당 좌표 2로 바꿔줘도(1로 바꾸면 벽취급 받아서 후진을 못해요~~~~) 안되는디??????

visited = [[0] * M for _ in range(N)]
visited[r][c] = 1

# 정확한 횟수를 가늠할 수 없으므로 while문 이용
while True:
    # i, j의 값을 로봇 청소기가 '이미' 바라보고 있는 방향의 왼쪽 방향으로 회전했다고 가정해서 값을 배정해줌
    i, j =  r + di[way[d]], c + dj[way[d]]
    # print('좌표', [r, c], [di[way[d]], dj[way[d]]], [i, j])
    # print(way[d])
    # 만약 해당 좌표 값이 1(벽)이 아니고, 아직 방문하지도 않은 좌표라면, 청소해도 괜찮음!
    # r, c, d의 값을 변경해준 후, cnt에 1을 더해준 후(청소 기록), stack 값을 리셋하고, 방문 기록 넘겨줌
    if not room[i][j] and not visited[i][j]:
        r, c, d = i, j, way[d]
        cnt += 1
        stack = 4
        visited[i][j] = 1
    # 만약 stack의 값이 0이라면, 4방향 모두 돌아봤는데도 청소 각이 안 나온 것이므로 그만둘지 안 그만둘지 검증할 것임
    # 만약 처음 바라보고 있었던 방향(이 시점에서는 4방향 다 돌아보고 왔기 때문에 d 값이 초기 값으로 변경되어 있음)의 뒤가 벽이라면, 그 즉시 청소를 종료함(while문 탈출)
    elif stack <= 0:
        if room[r + di[way[d-1]]][c + dj[way[d-1]]]:
            break
        # 만약 아니라면, r, c의 값을 후진했을 시의 좌표로 변경해준 후 stack을 초기화해줌
        else:
            r, c = r + di[way[d-1]], c + dj[way[d-1]]
            stack = 4
    # 만약 탈출, 후진, 전진 조건 중 아직 어느 것도 충족하지 못한 상태라면, 다른 방향을 돌아봐야 한다는 뜻임
    # d의 값을 현재 시점에서 왼쪽으로 회전했을 시의 방향 값으로 변경해준 후, stack에 -1 해줌
    else:
        d = way[d]
        stack -= 1

# 청소를 종료한 후, 청소를 완료한 에리어의 수를 출력함
print(cnt)
